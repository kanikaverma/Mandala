type token =
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | LBRACE
  | RBRACE
  | COLON
  | COMMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MODULUS
  | EXP
  | ASSIGN
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | RETURN
  | IF
  | ELSEIF
  | ELSE
  | FOREACH
  | BREAK
  | CONTINUE
  | TRUE
  | FALSE
  | AND
  | OR
  | NOT
  | XOR
  | TO
  | DEF
  | DRAW
  | CREATE
  | ADDTO
  | RADIUS
  | COUNT
  | SIZE
  | COLOR
  | ROTATION
  | OFFSET
  | ANGULARSHIFT
  | NUMBER
  | BOOLEAN
  | SHAPE
  | STRING
  | VOID
  | GEO
  | LAYER
  | MANDALA
  | CIRCLE
  | TRIANGLE
  | SQUARE
  | LITERAL of (int)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast;; 
# 68 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACKET *);
  260 (* RBRACKET *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* COLON *);
  264 (* COMMMA *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* MODULUS *);
  270 (* EXP *);
  271 (* ASSIGN *);
  272 (* EQ *);
  273 (* NEQ *);
  274 (* LT *);
  275 (* LEQ *);
  276 (* GT *);
  277 (* GEQ *);
  278 (* RETURN *);
  279 (* IF *);
  280 (* ELSEIF *);
  281 (* ELSE *);
  282 (* FOREACH *);
  283 (* BREAK *);
  284 (* CONTINUE *);
  285 (* TRUE *);
  286 (* FALSE *);
  287 (* AND *);
  288 (* OR *);
  289 (* NOT *);
  290 (* XOR *);
  291 (* TO *);
  292 (* DEF *);
  293 (* DRAW *);
  294 (* CREATE *);
  295 (* ADDTO *);
  296 (* RADIUS *);
  297 (* COUNT *);
  298 (* SIZE *);
  299 (* COLOR *);
  300 (* ROTATION *);
  301 (* OFFSET *);
  302 (* ANGULARSHIFT *);
  303 (* NUMBER *);
  304 (* BOOLEAN *);
  305 (* SHAPE *);
  306 (* STRING *);
  307 (* VOID *);
  308 (* GEO *);
  309 (* LAYER *);
  310 (* MANDALA *);
  311 (* CIRCLE *);
  312 (* TRIANGLE *);
  313 (* SQUARE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  314 (* LITERAL *);
  315 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\006\000\006\000\009\000\009\000\010\000\010\000\010\000\
\010\000\010\000\010\000\007\000\007\000\004\000\004\000\004\000\
\004\000\004\000\004\000\008\000\008\000\011\000\011\000\011\000\
\011\000\011\000\013\000\013\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\014\000\014\000\015\000\015\000\005\000\005\000\005\000\
\016\000\016\000\016\000\017\000\018\000\018\000\018\000\018\000\
\019\000\019\000\019\000\019\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\009\000\009\000\009\000\
\009\000\009\000\009\000\011\000\011\000\011\000\011\000\011\000\
\011\000\000\000\001\000\001\000\003\000\002\000\002\000\002\000\
\002\000\002\000\002\000\000\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\000\000\002\000\001\000\002\000\005\000\
\007\000\006\000\000\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\004\000\003\000\003\000\003\000\
\003\000\000\000\001\000\001\000\003\000\005\000\005\000\005\000\
\001\000\001\000\001\000\000\000\010\000\008\000\008\000\006\000\
\008\000\006\000\006\000\004\000\003\000\003\000\003\000\003\000\
\001\000\001\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\094\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\003\000\004\000\005\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\034\000\030\000\033\000\032\000\035\000\031\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\072\000\073\000\074\000\075\000\071\000\
\070\000\000\000\026\000\022\000\025\000\024\000\027\000\023\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\000\000\000\000\000\000\000\000\028\000\021\000\000\000\028\000\
\000\000\028\000\000\000\028\000\000\000\028\000\000\000\028\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\060\000\000\000\000\000\000\000\000\000\058\000\000\000\000\000\
\000\000\064\000\000\000\065\000\000\000\049\000\050\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\028\000\029\000\000\000\028\000\000\000\028\000\000\000\028\000\
\000\000\028\000\000\000\028\000\000\000\061\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000\041\000"

let yydgoto = "\002\000\
\003\000\004\000\014\000\186\000\016\000\069\000\150\000\187\000\
\070\000\071\000\207\000\208\000\222\000\166\000\167\000\084\000\
\085\000\086\000\087\000"

let yysindex = "\004\000\
\000\000\000\000\000\000\008\001\091\255\233\254\210\254\215\254\
\221\254\230\254\238\254\249\254\000\000\000\000\000\000\000\000\
\024\255\025\255\037\255\051\255\052\255\083\255\250\254\253\254\
\033\255\000\000\000\000\000\000\000\000\000\000\000\000\097\255\
\112\255\110\255\117\255\120\255\126\255\124\255\128\255\132\255\
\146\255\142\255\147\255\143\255\151\255\152\255\101\255\237\255\
\105\255\237\255\107\255\237\255\108\255\237\255\109\255\237\255\
\113\255\237\255\239\254\239\254\239\254\172\255\118\255\119\255\
\122\255\127\255\133\255\134\255\174\255\130\255\000\000\182\255\
\199\255\202\255\203\255\206\255\207\255\209\255\210\255\216\255\
\228\255\111\255\111\255\000\000\000\000\000\000\000\000\000\000\
\000\000\237\255\000\000\000\000\000\000\000\000\000\000\000\000\
\211\255\237\255\237\255\212\255\237\255\224\255\237\255\225\255\
\237\255\234\255\237\255\235\255\111\255\241\255\233\255\000\000\
\007\255\043\005\059\005\242\255\000\000\000\000\244\255\000\000\
\250\255\000\000\252\255\000\000\254\255\000\000\002\000\000\000\
\027\255\111\255\111\255\111\255\111\255\111\255\111\255\116\255\
\121\255\111\255\111\255\111\255\111\255\111\255\111\255\111\255\
\111\255\111\255\111\255\111\255\255\255\042\000\007\000\042\000\
\008\000\042\000\009\000\042\000\018\000\042\000\022\000\042\000\
\000\000\000\255\000\255\178\255\143\005\000\000\227\255\143\005\
\159\005\000\000\000\255\000\000\000\255\000\000\000\000\217\255\
\217\255\145\255\145\255\145\255\145\255\075\005\159\005\204\255\
\000\000\000\000\093\255\000\000\093\255\000\000\093\255\000\000\
\093\255\000\000\093\255\000\000\093\255\000\000\111\255\111\255\
\111\255\111\255\042\000\111\255\006\000\111\255\000\000\143\005\
\042\000\042\000\042\000\042\000\042\000\159\005\028\005\112\005\
\143\005\093\255\143\005\111\255\143\005\003\000\093\255\093\255\
\093\255\093\255\093\255\111\255\111\255\111\255\088\255\111\255\
\128\005\143\005\143\005\093\255\033\000\111\255\024\000\093\255\
\143\005\093\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
\000\000\055\000\000\000\055\000\000\000\055\000\000\000\055\000\
\000\000\055\000\020\000\020\000\020\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\059\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\055\000\000\000\055\000\000\000\055\000\000\000\
\055\000\000\000\055\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\156\004\000\000\156\004\
\000\000\156\004\000\000\156\004\000\000\156\004\000\000\156\004\
\000\000\062\000\123\000\000\000\212\003\000\000\151\003\017\004\
\222\002\000\000\184\000\000\000\245\000\000\000\000\000\100\002\
\161\002\052\001\113\001\174\001\235\001\000\000\027\003\067\002\
\000\000\000\000\128\002\000\000\180\002\000\000\202\002\000\000\
\241\002\000\000\007\003\000\000\046\003\000\000\000\000\000\000\
\000\000\000\000\156\004\000\000\000\000\030\000\000\000\083\004\
\156\004\156\004\156\004\156\004\156\004\088\003\068\003\170\003\
\192\003\231\003\102\004\000\000\040\000\000\000\253\003\042\004\
\136\004\157\004\180\004\000\000\000\000\000\000\000\000\061\000\
\188\004\207\004\215\004\000\000\000\000\000\000\064\004\000\000\
\236\004\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\072\001\000\000\150\000\153\255\104\255\
\000\000\235\000\023\255\189\255\110\000\000\000\000\000\245\255\
\000\000\000\000\000\000"

let yytablesize = 1740
let yytable = "\189\000\
\046\000\191\000\239\000\193\000\001\000\195\000\243\000\197\000\
\244\000\132\000\138\000\139\000\026\000\133\000\114\000\115\000\
\152\000\027\000\154\000\076\000\156\000\134\000\158\000\028\000\
\160\000\023\000\032\000\034\000\161\000\024\000\025\000\082\000\
\029\000\135\000\083\000\136\000\137\000\138\000\139\000\036\000\
\030\000\129\000\140\000\141\000\142\000\143\000\144\000\145\000\
\088\000\089\000\218\000\031\000\044\000\038\000\040\000\045\000\
\223\000\224\000\225\000\226\000\227\000\062\000\162\000\163\000\
\164\000\165\000\168\000\169\000\171\000\173\000\174\000\175\000\
\176\000\177\000\178\000\179\000\180\000\181\000\182\000\183\000\
\184\000\203\000\033\000\035\000\209\000\042\000\210\000\147\000\
\211\000\236\000\212\000\046\000\213\000\109\000\135\000\037\000\
\136\000\137\000\138\000\139\000\047\000\110\000\111\000\140\000\
\141\000\142\000\143\000\144\000\145\000\039\000\041\000\109\000\
\048\000\049\000\204\000\205\000\109\000\050\000\206\000\110\000\
\111\000\109\000\063\000\051\000\170\000\111\000\052\000\053\000\
\054\000\110\000\172\000\214\000\215\000\216\000\217\000\055\000\
\219\000\017\000\221\000\018\000\019\000\043\000\020\000\021\000\
\022\000\057\000\056\000\058\000\147\000\059\000\112\000\113\000\
\231\000\136\000\137\000\138\000\139\000\060\000\061\000\062\000\
\233\000\234\000\235\000\072\000\221\000\074\000\076\000\078\000\
\112\000\113\000\241\000\080\000\090\000\112\000\113\000\097\000\
\091\000\092\000\112\000\113\000\093\000\198\000\099\000\047\000\
\135\000\094\000\136\000\137\000\138\000\139\000\098\000\095\000\
\096\000\140\000\141\000\142\000\143\000\144\000\145\000\073\000\
\100\000\075\000\101\000\077\000\102\000\079\000\103\000\081\000\
\104\000\105\000\135\000\106\000\136\000\137\000\138\000\139\000\
\107\000\117\000\120\000\140\000\141\000\142\000\143\000\144\000\
\145\000\136\000\137\000\138\000\139\000\108\000\122\000\124\000\
\140\000\141\000\142\000\143\000\144\000\145\000\147\000\116\000\
\126\000\128\000\131\000\149\000\048\000\151\000\201\000\202\000\
\119\000\130\000\121\000\153\000\123\000\155\000\125\000\157\000\
\127\000\046\000\046\000\159\000\046\000\185\000\220\000\013\000\
\147\000\046\000\046\000\046\000\046\000\188\000\190\000\192\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\194\000\046\000\046\000\063\000\196\000\064\000\065\000\199\000\
\066\000\067\000\068\000\046\000\046\000\232\000\046\000\240\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\242\000\046\000\046\000\053\000\046\000\046\000\046\000\076\000\
\018\000\076\000\046\000\046\000\019\000\046\000\062\000\062\000\
\043\000\062\000\076\000\043\000\062\000\076\000\062\000\062\000\
\076\000\076\000\044\000\015\000\118\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\237\000\062\000\062\000\
\007\000\000\000\008\000\009\000\000\000\010\000\011\000\012\000\
\062\000\062\000\000\000\062\000\000\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\000\000\062\000\062\000\
\054\000\062\000\062\000\062\000\000\000\000\000\000\000\062\000\
\062\000\000\000\062\000\063\000\063\000\000\000\063\000\000\000\
\000\000\063\000\000\000\063\000\063\000\000\000\000\000\000\000\
\000\000\000\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\000\000\063\000\063\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\063\000\063\000\000\000\
\063\000\000\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\000\000\063\000\063\000\055\000\063\000\063\000\
\063\000\000\000\000\000\000\000\063\000\063\000\000\000\063\000\
\047\000\047\000\000\000\047\000\000\000\000\000\047\000\000\000\
\047\000\047\000\000\000\000\000\000\000\000\000\000\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\000\000\
\047\000\047\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\047\000\047\000\000\000\047\000\000\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\000\000\
\047\000\047\000\056\000\047\000\047\000\047\000\000\000\000\000\
\000\000\047\000\047\000\000\000\047\000\048\000\048\000\000\000\
\048\000\000\000\000\000\048\000\000\000\048\000\048\000\000\000\
\000\000\000\000\000\000\000\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\000\000\048\000\048\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\048\000\000\000\048\000\000\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\066\000\048\000\048\000\000\000\
\048\000\048\000\048\000\005\000\000\000\006\000\048\000\048\000\
\000\000\048\000\000\000\000\000\053\000\053\000\007\000\053\000\
\008\000\009\000\053\000\010\000\011\000\012\000\000\000\000\000\
\000\000\000\000\084\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\000\000\053\000\053\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\000\053\000\
\000\000\053\000\000\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\051\000\053\000\053\000\000\000\053\000\
\053\000\053\000\000\000\000\000\000\000\053\000\053\000\000\000\
\053\000\054\000\054\000\000\000\054\000\000\000\000\000\054\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\000\000\054\000\054\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\054\000\054\000\000\000\054\000\000\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\052\000\054\000\054\000\000\000\054\000\054\000\054\000\000\000\
\000\000\000\000\054\000\054\000\000\000\054\000\055\000\055\000\
\000\000\055\000\000\000\008\000\055\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\000\000\055\000\055\000\
\000\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\055\000\055\000\000\000\055\000\000\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\093\000\055\000\055\000\
\000\000\055\000\055\000\055\000\000\000\000\000\000\000\055\000\
\055\000\000\000\055\000\056\000\056\000\000\000\056\000\000\000\
\009\000\056\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\000\000\056\000\056\000\000\000\007\000\000\000\
\000\000\000\000\000\000\000\000\000\000\056\000\056\000\000\000\
\056\000\000\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\059\000\056\000\056\000\000\000\056\000\056\000\
\056\000\000\000\000\000\000\000\056\000\056\000\066\000\056\000\
\066\000\000\000\000\000\066\000\000\000\006\000\000\000\066\000\
\066\000\000\000\000\000\000\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\000\000\066\000\066\000\000\000\
\000\000\000\000\000\000\080\000\000\000\000\000\000\000\066\000\
\066\000\000\000\066\000\000\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\000\000\066\000\066\000\069\000\
\066\000\066\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\066\000\000\000\000\000\051\000\051\000\084\000\051\000\
\084\000\000\000\051\000\000\000\000\000\000\000\000\000\000\000\
\000\000\084\000\000\000\084\000\084\000\000\000\084\000\084\000\
\084\000\051\000\051\000\000\000\051\000\051\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\051\000\051\000\
\000\000\051\000\000\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\000\000\051\000\051\000\067\000\051\000\
\051\000\051\000\000\000\000\000\000\000\051\000\051\000\000\000\
\051\000\052\000\052\000\010\000\052\000\010\000\000\000\052\000\
\000\000\082\000\000\000\000\000\000\000\000\000\010\000\000\000\
\010\000\010\000\000\000\010\000\010\000\010\000\052\000\052\000\
\000\000\052\000\052\000\000\000\000\000\000\000\000\000\083\000\
\000\000\000\000\000\000\052\000\052\000\000\000\052\000\000\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\000\000\052\000\052\000\068\000\052\000\052\000\052\000\008\000\
\000\000\008\000\052\000\052\000\000\000\052\000\093\000\093\000\
\000\000\093\000\008\000\000\000\008\000\008\000\016\000\008\000\
\008\000\008\000\000\000\000\000\000\000\011\000\000\000\011\000\
\000\000\000\000\000\000\093\000\093\000\000\000\093\000\093\000\
\011\000\000\000\011\000\011\000\014\000\011\000\011\000\011\000\
\093\000\093\000\000\000\093\000\000\000\093\000\093\000\093\000\
\093\000\093\000\093\000\093\000\093\000\000\000\093\000\093\000\
\057\000\093\000\093\000\093\000\009\000\000\000\009\000\093\000\
\093\000\000\000\093\000\059\000\059\000\000\000\059\000\009\000\
\000\000\009\000\009\000\000\000\009\000\009\000\009\000\000\000\
\000\000\017\000\007\000\000\000\007\000\000\000\000\000\000\000\
\059\000\059\000\000\000\059\000\059\000\007\000\000\000\007\000\
\007\000\000\000\007\000\007\000\007\000\059\000\059\000\040\000\
\059\000\000\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\000\000\059\000\059\000\000\000\059\000\059\000\
\059\000\006\000\038\000\006\000\059\000\059\000\000\000\059\000\
\069\000\069\000\000\000\069\000\006\000\000\000\006\000\006\000\
\000\000\006\000\006\000\006\000\000\000\039\000\000\000\080\000\
\000\000\080\000\000\000\000\000\000\000\069\000\069\000\000\000\
\069\000\069\000\080\000\000\000\080\000\080\000\000\000\080\000\
\080\000\080\000\069\000\069\000\000\000\069\000\000\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\015\000\
\069\000\069\000\000\000\069\000\069\000\069\000\000\000\000\000\
\000\000\069\000\069\000\000\000\069\000\000\000\000\000\067\000\
\067\000\000\000\067\000\036\000\013\000\067\000\000\000\067\000\
\067\000\067\000\067\000\000\000\000\000\000\000\067\000\067\000\
\067\000\067\000\067\000\067\000\067\000\067\000\000\000\067\000\
\067\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\
\000\000\067\000\067\000\078\000\067\000\000\000\067\000\067\000\
\067\000\067\000\067\000\067\000\067\000\067\000\000\000\067\000\
\067\000\000\000\067\000\067\000\067\000\082\000\079\000\082\000\
\067\000\067\000\000\000\000\000\068\000\068\000\081\000\068\000\
\082\000\000\000\082\000\082\000\000\000\082\000\082\000\082\000\
\000\000\000\000\000\000\083\000\000\000\083\000\000\000\000\000\
\000\000\068\000\068\000\077\000\068\000\068\000\083\000\000\000\
\083\000\083\000\000\000\083\000\083\000\083\000\068\000\068\000\
\000\000\068\000\000\000\068\000\068\000\068\000\068\000\068\000\
\068\000\068\000\068\000\000\000\068\000\068\000\000\000\068\000\
\068\000\068\000\016\000\000\000\016\000\068\000\068\000\000\000\
\000\000\057\000\057\000\000\000\057\000\016\000\000\000\016\000\
\016\000\000\000\016\000\016\000\016\000\000\000\000\000\000\000\
\014\000\000\000\014\000\000\000\000\000\000\000\057\000\057\000\
\000\000\057\000\057\000\014\000\000\000\014\000\014\000\000\000\
\014\000\014\000\014\000\057\000\057\000\000\000\057\000\000\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\040\000\057\000\057\000\000\000\057\000\057\000\057\000\000\000\
\040\000\040\000\057\000\057\000\000\000\017\000\000\000\017\000\
\000\000\000\000\000\000\038\000\000\000\040\000\040\000\000\000\
\017\000\040\000\017\000\017\000\000\000\017\000\017\000\017\000\
\000\000\000\000\000\000\040\000\000\000\040\000\039\000\000\000\
\038\000\038\000\000\000\038\000\038\000\000\000\040\000\000\000\
\040\000\040\000\000\000\040\000\040\000\040\000\038\000\000\000\
\038\000\040\000\040\000\039\000\039\000\000\000\039\000\039\000\
\000\000\038\000\000\000\038\000\038\000\000\000\038\000\038\000\
\038\000\039\000\000\000\039\000\038\000\038\000\000\000\000\000\
\000\000\000\000\000\000\000\000\039\000\000\000\039\000\039\000\
\000\000\039\000\039\000\039\000\036\000\000\000\000\000\039\000\
\039\000\000\000\000\000\000\000\036\000\036\000\000\000\000\000\
\000\000\000\000\000\000\015\000\000\000\015\000\000\000\000\000\
\000\000\036\000\036\000\000\000\000\000\036\000\015\000\000\000\
\015\000\015\000\000\000\015\000\015\000\015\000\000\000\036\000\
\013\000\036\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\013\000\000\000\013\000\013\000\000\000\
\013\000\013\000\013\000\000\000\000\000\036\000\036\000\012\000\
\000\000\012\000\000\000\000\000\000\000\000\000\000\000\078\000\
\000\000\078\000\012\000\000\000\012\000\012\000\000\000\012\000\
\012\000\012\000\078\000\000\000\078\000\078\000\000\000\078\000\
\078\000\078\000\079\000\000\000\079\000\000\000\000\000\000\000\
\000\000\000\000\081\000\000\000\081\000\079\000\000\000\079\000\
\079\000\000\000\079\000\079\000\079\000\081\000\000\000\081\000\
\081\000\000\000\081\000\081\000\081\000\000\000\000\000\077\000\
\000\000\077\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\077\000\000\000\077\000\077\000\000\000\077\000\
\077\000\077\000\135\000\000\000\136\000\137\000\138\000\139\000\
\000\000\000\000\000\000\140\000\141\000\142\000\143\000\144\000\
\145\000\135\000\000\000\136\000\137\000\138\000\139\000\000\000\
\000\000\000\000\140\000\141\000\142\000\143\000\144\000\145\000\
\000\000\135\000\000\000\136\000\137\000\138\000\139\000\000\000\
\228\000\229\000\140\000\141\000\142\000\143\000\144\000\145\000\
\000\000\135\000\146\000\136\000\137\000\138\000\139\000\000\000\
\147\000\000\000\140\000\141\000\142\000\143\000\144\000\145\000\
\000\000\000\000\000\000\000\000\148\000\000\000\000\000\147\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\200\000\000\000\000\000\135\000\147\000\
\136\000\137\000\138\000\139\000\000\000\000\000\000\000\140\000\
\141\000\142\000\143\000\144\000\145\000\000\000\135\000\147\000\
\136\000\137\000\138\000\139\000\000\000\000\000\000\000\140\000\
\141\000\142\000\143\000\144\000\145\000\135\000\000\000\136\000\
\137\000\138\000\139\000\230\000\000\000\000\000\140\000\141\000\
\142\000\143\000\144\000\145\000\000\000\135\000\000\000\136\000\
\137\000\138\000\139\000\000\000\147\000\238\000\140\000\141\000\
\142\000\143\000\144\000\145\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\147\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\147\000"

let yycheck = "\152\000\
\000\000\154\000\236\000\156\000\001\000\158\000\240\000\160\000\
\242\000\003\001\011\001\012\001\059\001\007\001\082\000\083\000\
\120\000\059\001\122\000\000\000\124\000\015\001\126\000\059\001\
\128\000\049\001\003\001\003\001\002\001\053\001\054\001\049\001\
\059\001\007\001\052\001\009\001\010\001\011\001\012\001\003\001\
\059\001\109\000\016\001\017\001\018\001\019\001\020\001\021\001\
\060\000\061\000\203\000\059\001\059\001\003\001\003\001\059\001\
\209\000\210\000\211\000\212\000\213\000\000\000\130\000\131\000\
\132\000\133\000\134\000\135\000\136\000\137\000\138\000\139\000\
\140\000\141\000\142\000\143\000\144\000\145\000\146\000\147\000\
\148\000\185\000\059\001\059\001\188\000\003\001\190\000\061\001\
\192\000\002\001\194\000\059\001\196\000\001\001\007\001\059\001\
\009\001\010\001\011\001\012\001\004\001\009\001\010\001\016\001\
\017\001\018\001\019\001\020\001\021\001\059\001\059\001\001\001\
\001\001\004\001\022\001\023\001\001\001\001\001\026\001\009\001\
\010\001\001\001\000\000\004\001\009\001\010\001\001\001\004\001\
\001\001\009\001\010\001\199\000\200\000\201\000\202\000\004\001\
\204\000\047\001\206\000\049\001\050\001\059\001\052\001\053\001\
\054\001\004\001\001\001\001\001\061\001\007\001\058\001\059\001\
\220\000\009\001\010\001\011\001\012\001\007\001\007\001\059\001\
\228\000\229\000\230\000\059\001\232\000\059\001\059\001\059\001\
\058\001\059\001\238\000\059\001\001\001\058\001\059\001\002\001\
\059\001\059\001\058\001\059\001\059\001\004\001\001\001\000\000\
\007\001\059\001\009\001\010\001\011\001\012\001\061\001\059\001\
\059\001\016\001\017\001\018\001\019\001\020\001\021\001\050\000\
\002\001\052\000\001\001\054\000\002\001\056\000\001\001\058\000\
\002\001\001\001\007\001\002\001\009\001\010\001\011\001\012\001\
\001\001\007\001\007\001\016\001\017\001\018\001\019\001\020\001\
\021\001\009\001\010\001\011\001\012\001\002\001\007\001\007\001\
\016\001\017\001\018\001\019\001\020\001\021\001\061\001\090\000\
\007\001\007\001\010\001\002\001\000\000\002\001\043\001\044\001\
\099\000\009\001\101\000\002\001\103\000\002\001\105\000\002\001\
\107\000\001\001\002\001\002\001\004\001\007\001\001\001\000\000\
\061\001\009\001\010\001\011\001\012\001\007\001\007\001\007\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\007\001\025\001\026\001\047\001\007\001\049\001\050\001\061\001\
\052\001\053\001\054\001\035\001\036\001\035\001\038\001\007\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\025\001\049\001\050\001\000\000\052\001\053\001\054\001\036\001\
\002\001\038\001\058\001\059\001\002\001\061\001\001\001\002\001\
\035\001\004\001\047\001\007\001\007\001\050\001\009\001\010\001\
\053\001\054\001\035\001\004\000\098\000\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\232\000\025\001\026\001\
\047\001\255\255\049\001\050\001\255\255\052\001\053\001\054\001\
\035\001\036\001\255\255\038\001\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\255\255\049\001\050\001\
\000\000\052\001\053\001\054\001\255\255\255\255\255\255\058\001\
\059\001\255\255\061\001\001\001\002\001\255\255\004\001\255\255\
\255\255\007\001\255\255\009\001\010\001\255\255\255\255\255\255\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\035\001\036\001\255\255\
\038\001\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\255\255\049\001\050\001\000\000\052\001\053\001\
\054\001\255\255\255\255\255\255\058\001\059\001\255\255\061\001\
\001\001\002\001\255\255\004\001\255\255\255\255\007\001\255\255\
\009\001\010\001\255\255\255\255\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\035\001\036\001\255\255\038\001\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\255\255\
\049\001\050\001\000\000\052\001\053\001\054\001\255\255\255\255\
\255\255\058\001\059\001\255\255\061\001\001\001\002\001\255\255\
\004\001\255\255\255\255\007\001\255\255\009\001\010\001\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\025\001\026\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\035\001\
\036\001\255\255\038\001\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\000\000\049\001\050\001\255\255\
\052\001\053\001\054\001\036\001\255\255\038\001\058\001\059\001\
\255\255\061\001\255\255\255\255\001\001\002\001\047\001\004\001\
\049\001\050\001\007\001\052\001\053\001\054\001\255\255\255\255\
\255\255\255\255\000\000\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\025\001\026\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\035\001\036\001\
\255\255\038\001\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\000\000\049\001\050\001\255\255\052\001\
\053\001\054\001\255\255\255\255\255\255\058\001\059\001\255\255\
\061\001\001\001\002\001\255\255\004\001\255\255\255\255\007\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\035\001\036\001\255\255\038\001\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\000\000\049\001\050\001\255\255\052\001\053\001\054\001\255\255\
\255\255\255\255\058\001\059\001\255\255\061\001\001\001\002\001\
\255\255\004\001\255\255\000\000\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\025\001\026\001\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\035\001\036\001\255\255\038\001\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\000\000\049\001\050\001\
\255\255\052\001\053\001\054\001\255\255\255\255\255\255\058\001\
\059\001\255\255\061\001\001\001\002\001\255\255\004\001\255\255\
\000\000\007\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\035\001\036\001\255\255\
\038\001\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\000\000\049\001\050\001\255\255\052\001\053\001\
\054\001\255\255\255\255\255\255\058\001\059\001\002\001\061\001\
\004\001\255\255\255\255\007\001\255\255\000\000\255\255\011\001\
\012\001\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\025\001\026\001\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\035\001\
\036\001\255\255\038\001\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\255\255\049\001\050\001\000\000\
\052\001\053\001\054\001\255\255\255\255\255\255\255\255\255\255\
\255\255\061\001\255\255\255\255\001\001\002\001\036\001\004\001\
\038\001\255\255\007\001\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\255\255\049\001\050\001\255\255\052\001\053\001\
\054\001\022\001\023\001\255\255\025\001\026\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\035\001\036\001\
\255\255\038\001\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\255\255\049\001\050\001\000\000\052\001\
\053\001\054\001\255\255\255\255\255\255\058\001\059\001\255\255\
\061\001\001\001\002\001\036\001\004\001\038\001\255\255\007\001\
\255\255\000\000\255\255\255\255\255\255\255\255\047\001\255\255\
\049\001\050\001\255\255\052\001\053\001\054\001\022\001\023\001\
\255\255\025\001\026\001\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\035\001\036\001\255\255\038\001\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\255\255\049\001\050\001\000\000\052\001\053\001\054\001\036\001\
\255\255\038\001\058\001\059\001\255\255\061\001\001\001\002\001\
\255\255\004\001\047\001\255\255\049\001\050\001\000\000\052\001\
\053\001\054\001\255\255\255\255\255\255\036\001\255\255\038\001\
\255\255\255\255\255\255\022\001\023\001\255\255\025\001\026\001\
\047\001\255\255\049\001\050\001\000\000\052\001\053\001\054\001\
\035\001\036\001\255\255\038\001\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\255\255\049\001\050\001\
\000\000\052\001\053\001\054\001\036\001\255\255\038\001\058\001\
\059\001\255\255\061\001\001\001\002\001\255\255\004\001\047\001\
\255\255\049\001\050\001\255\255\052\001\053\001\054\001\255\255\
\255\255\000\000\036\001\255\255\038\001\255\255\255\255\255\255\
\022\001\023\001\255\255\025\001\026\001\047\001\255\255\049\001\
\050\001\255\255\052\001\053\001\054\001\035\001\036\001\000\000\
\038\001\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\255\255\049\001\050\001\255\255\052\001\053\001\
\054\001\036\001\000\000\038\001\058\001\059\001\255\255\061\001\
\001\001\002\001\255\255\004\001\047\001\255\255\049\001\050\001\
\255\255\052\001\053\001\054\001\255\255\000\000\255\255\036\001\
\255\255\038\001\255\255\255\255\255\255\022\001\023\001\255\255\
\025\001\026\001\047\001\255\255\049\001\050\001\255\255\052\001\
\053\001\054\001\035\001\036\001\255\255\038\001\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\000\000\
\049\001\050\001\255\255\052\001\053\001\054\001\255\255\255\255\
\255\255\058\001\059\001\255\255\061\001\255\255\255\255\001\001\
\002\001\255\255\004\001\000\000\000\000\007\001\255\255\009\001\
\010\001\011\001\012\001\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\026\001\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\035\001\036\001\000\000\038\001\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\255\255\049\001\
\050\001\255\255\052\001\053\001\054\001\036\001\000\000\038\001\
\058\001\059\001\255\255\255\255\001\001\002\001\000\000\004\001\
\047\001\255\255\049\001\050\001\255\255\052\001\053\001\054\001\
\255\255\255\255\255\255\036\001\255\255\038\001\255\255\255\255\
\255\255\022\001\023\001\000\000\025\001\026\001\047\001\255\255\
\049\001\050\001\255\255\052\001\053\001\054\001\035\001\036\001\
\255\255\038\001\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\255\255\049\001\050\001\255\255\052\001\
\053\001\054\001\036\001\255\255\038\001\058\001\059\001\255\255\
\255\255\001\001\002\001\255\255\004\001\047\001\255\255\049\001\
\050\001\255\255\052\001\053\001\054\001\255\255\255\255\255\255\
\036\001\255\255\038\001\255\255\255\255\255\255\022\001\023\001\
\255\255\025\001\026\001\047\001\255\255\049\001\050\001\255\255\
\052\001\053\001\054\001\035\001\036\001\255\255\038\001\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\001\001\049\001\050\001\255\255\052\001\053\001\054\001\255\255\
\009\001\010\001\058\001\059\001\255\255\036\001\255\255\038\001\
\255\255\255\255\255\255\001\001\255\255\022\001\023\001\255\255\
\047\001\026\001\049\001\050\001\255\255\052\001\053\001\054\001\
\255\255\255\255\255\255\036\001\255\255\038\001\001\001\255\255\
\022\001\023\001\255\255\025\001\026\001\255\255\047\001\255\255\
\049\001\050\001\255\255\052\001\053\001\054\001\036\001\255\255\
\038\001\058\001\059\001\022\001\023\001\255\255\025\001\026\001\
\255\255\047\001\255\255\049\001\050\001\255\255\052\001\053\001\
\054\001\036\001\255\255\038\001\058\001\059\001\255\255\255\255\
\255\255\255\255\255\255\255\255\047\001\255\255\049\001\050\001\
\255\255\052\001\053\001\054\001\001\001\255\255\255\255\058\001\
\059\001\255\255\255\255\255\255\009\001\010\001\255\255\255\255\
\255\255\255\255\255\255\036\001\255\255\038\001\255\255\255\255\
\255\255\022\001\023\001\255\255\255\255\026\001\047\001\255\255\
\049\001\050\001\255\255\052\001\053\001\054\001\255\255\036\001\
\036\001\038\001\038\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\047\001\255\255\049\001\050\001\255\255\
\052\001\053\001\054\001\255\255\255\255\058\001\059\001\036\001\
\255\255\038\001\255\255\255\255\255\255\255\255\255\255\036\001\
\255\255\038\001\047\001\255\255\049\001\050\001\255\255\052\001\
\053\001\054\001\047\001\255\255\049\001\050\001\255\255\052\001\
\053\001\054\001\036\001\255\255\038\001\255\255\255\255\255\255\
\255\255\255\255\036\001\255\255\038\001\047\001\255\255\049\001\
\050\001\255\255\052\001\053\001\054\001\047\001\255\255\049\001\
\050\001\255\255\052\001\053\001\054\001\255\255\255\255\036\001\
\255\255\038\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\047\001\255\255\049\001\050\001\255\255\052\001\
\053\001\054\001\007\001\255\255\009\001\010\001\011\001\012\001\
\255\255\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\007\001\255\255\009\001\010\001\011\001\012\001\255\255\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\007\001\255\255\009\001\010\001\011\001\012\001\255\255\
\045\001\046\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\007\001\040\001\009\001\010\001\011\001\012\001\255\255\
\061\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\042\001\255\255\255\255\061\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\041\001\255\255\255\255\007\001\061\001\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\007\001\061\001\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\007\001\255\255\009\001\
\010\001\011\001\012\001\044\001\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\007\001\255\255\009\001\
\010\001\011\001\012\001\255\255\061\001\046\001\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\061\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\061\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  LBRACE\000\
  RBRACE\000\
  COLON\000\
  COMMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MODULUS\000\
  EXP\000\
  ASSIGN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  RETURN\000\
  IF\000\
  ELSEIF\000\
  ELSE\000\
  FOREACH\000\
  BREAK\000\
  CONTINUE\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  NOT\000\
  XOR\000\
  TO\000\
  DEF\000\
  DRAW\000\
  CREATE\000\
  ADDTO\000\
  RADIUS\000\
  COUNT\000\
  SIZE\000\
  COLOR\000\
  ROTATION\000\
  OFFSET\000\
  ANGULARSHIFT\000\
  NUMBER\000\
  BOOLEAN\000\
  SHAPE\000\
  STRING\000\
  VOID\000\
  GEO\000\
  LAYER\000\
  MANDALA\000\
  CIRCLE\000\
  TRIANGLE\000\
  SQUARE\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 33 "parser.mly"
            ( _1 )
# 786 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
               ( [], [] )
# 792 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 37 "parser.mly"
               ( fst _1, (_2 :: snd _1) )
# 800 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 38 "parser.mly"
               ( (_2 :: fst _1), snd _1 )
# 808 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cdecl) in
    Obj.repr(
# 39 "parser.mly"
               ( fst _1, (_2 :: snd _1) )
# 816 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 43 "parser.mly"
  ( { fname = _3;
		returntype = Mandalat;
		formals = _5;
		locals = List.rev _8;
		body = List.rev _9 })
# 830 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 49 "parser.mly"
  ( { fname = _3;
		returntype = Layert;
		formals = _5;
		locals = List.rev _8;
		body = List.rev _9 })
# 844 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 55 "parser.mly"
  ( { fname = _3;
		returntype = Shapet;
		formals = _5;
		locals = List.rev _8;
		body = List.rev _9 })
# 858 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 61 "parser.mly"
  ( { fname = _3;
		returntype = Geot;
		formals = _5;
		locals = List.rev _8;
		body = List.rev _9 })
# 872 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 67 "parser.mly"
  ( { fname = _3;
		returntype = Numbert;
		formals = _5;
		locals = List.rev _8;
		body = List.rev _9 })
# 886 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 73 "parser.mly"
  ( { fname = _3;
		returntype = Stringt;
		formals = _5;
		locals = List.rev _8;
		body = List.rev _9 })
# 900 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _5 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 79 "parser.mly"
  ( { fname = _5;
		returntype = Arrayt;
		formals = _7;
		locals = List.rev _10;
		body = List.rev _11 })
# 914 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _5 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 85 "parser.mly"
  ( { fname = _5;
		returntype = Arrayt;
		formals = _7;
		locals = List.rev _10;
		body = List.rev _11 })
# 928 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _5 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 91 "parser.mly"
  ( { fname = _5;
		returntype = Arrayt;
		formals = _7;
		locals = List.rev _10;
		body = List.rev _11 })
# 942 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _5 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 97 "parser.mly"
  ( { fname = _5;
		returntype = Arrayt;
		formals = _7;
		locals = List.rev _10;
		body = List.rev _11 })
# 956 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _5 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 103 "parser.mly"
  ( { fname = _5;
		returntype = Arrayt;
		formals = _7;
		locals = List.rev _10;
		body = List.rev _11 })
# 970 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _5 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 109 "parser.mly"
  ( { fname = _5;
		returntype = Arrayt;
		formals = _7;
		locals = List.rev _10;
		body = List.rev _11 })
# 984 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parser.mly"
                              ( [] )
# 990 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 120 "parser.mly"
                   ( List.rev _1 )
# 997 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 131 "parser.mly"
           ( [_1] )
# 1004 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 132 "parser.mly"
                            ( _3 :: _1 )
# 1012 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 135 "parser.mly"
              ({ kind = Shapet; vname = _2; vvalue = [0]})
# 1019 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 136 "parser.mly"
               ({ kind = Mandalat; vname = _2; vvalue = [0]})
# 1026 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 137 "parser.mly"
            ({ kind = Geot; vname = _2; vvalue = [0]})
# 1033 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 138 "parser.mly"
              ({ kind = Stringt; vname = _2; vvalue = [0]})
# 1040 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 139 "parser.mly"
              ({ kind = Numbert; vname = _2; vvalue = [0]})
# 1047 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 140 "parser.mly"
              ({ kind = Layert; vname = _2; vvalue = [0]})
# 1054 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "parser.mly"
                   ( [] )
# 1060 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 143 "parser.mly"
                       ( _2 :: _1 )
# 1068 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 145 "parser.mly"
              ({ kind = Shapet; vname = _2; vvalue = [0] })
# 1075 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 146 "parser.mly"
               ({ kind = Mandalat; vname = _2; vvalue = [0] })
# 1082 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 147 "parser.mly"
            ({ kind = Geot; vname = _2; vvalue = [0] })
# 1089 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 148 "parser.mly"
              ({ kind = Stringt; vname = _2; vvalue = [0] })
# 1096 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 149 "parser.mly"
              ({ kind = Numbert; vname = _2; vvalue = [0] })
# 1103 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 150 "parser.mly"
              ({ kind = Layert; vname = _2; vvalue = [0] })
# 1110 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 152 "parser.mly"
                   ( [] )
# 1116 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 153 "parser.mly"
                     ( _2 :: _1 )
# 1124 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 156 "parser.mly"
               ( Expr(_1) )
# 1131 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
                       ( Return(_2) )
# 1138 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 158 "parser.mly"
                                            ( IF(_3, _5, Block([])) )
# 1146 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 159 "parser.mly"
                                          ( IF(_3, _5, _7) )
# 1155 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 160 "parser.mly"
                                            ( Foreach(_2, _4, _6) )
# 1164 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "parser.mly"
                 ( Noexpr )
# 1170 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "parser.mly"
           ( _1 )
# 1177 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 167 "parser.mly"
              ( Literal(_1) )
# 1184 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 168 "parser.mly"
            ( Id(_1) )
# 1191 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 169 "parser.mly"
                    ( Binop(_1, Add, _3) )
# 1199 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 170 "parser.mly"
                     ( Binop(_1, Sub, _3) )
# 1207 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "parser.mly"
                      ( Binop(_1, Mult, _3) )
# 1215 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 172 "parser.mly"
                       ( Binop(_1, Div, _3) )
# 1223 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 173 "parser.mly"
                   ( Binop(_1, Equal, _3) )
# 1231 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 174 "parser.mly"
                    ( Binop(_1, Neq, _3) )
# 1239 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "parser.mly"
                    ( Binop(_1, Less, _3) )
# 1247 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 176 "parser.mly"
                    ( Binop(_1, Leq, _3) )
# 1255 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "parser.mly"
                   ( Binop(_1, Greater, _3) )
# 1263 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 178 "parser.mly"
                    ( Binop(_1, Geq, _3) )
# 1271 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "parser.mly"
                     ( Assign(_1, _3) )
# 1279 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_opt) in
    Obj.repr(
# 180 "parser.mly"
                          ( Call(_1, _3) )
# 1287 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 181 "parser.mly"
                     ( Binop(_1, Comm, _3) )
# 1295 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 182 "parser.mly"
                        ( _2 )
# 1302 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 183 "parser.mly"
                             ( Array(_1, _3) )
# 1310 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 184 "parser.mly"
                    ( PrefixPlus(_3) )
# 1317 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 185 "parser.mly"
                       ( PrefixMinus(_3) )
# 1324 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 186 "parser.mly"
                    ( PostfixPlus(_1) )
# 1331 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 187 "parser.mly"
                      ( PostfixMinus(_1) )
# 1338 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 190 "parser.mly"
                   ( [ ] )
# 1344 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 191 "parser.mly"
                    ( List.rev _1 )
# 1351 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 193 "parser.mly"
              ( [_1] )
# 1358 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 194 "parser.mly"
                              ( _3 :: _1 )
# 1366 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'construct_args) in
    Obj.repr(
# 200 "parser.mly"
  ({ fname = _3;
			returntype = Mandalat;
			formals = _5;
		})
# 1377 "parser.ml"
               : 'cdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'construct_args) in
    Obj.repr(
# 205 "parser.mly"
  ({ fname = _3;
			returntype = Layert;
			formals = _5;
		})
# 1388 "parser.ml"
               : 'cdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'construct_args) in
    Obj.repr(
# 210 "parser.mly"
  ({ fname = _3;
			returntype = Shapet;
			formals = _5;
		})
# 1399 "parser.ml"
               : 'cdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mandala_args) in
    Obj.repr(
# 216 "parser.mly"
                ( [] )
# 1406 "parser.ml"
               : 'construct_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'layer_args) in
    Obj.repr(
# 217 "parser.mly"
               ( List.rev _1 )
# 1413 "parser.ml"
               : 'construct_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'shape_args) in
    Obj.repr(
# 218 "parser.mly"
                ( List.rev _1 )
# 1420 "parser.ml"
               : 'construct_args))
; (fun __caml_parser_env ->
    Obj.repr(
# 221 "parser.mly"
                ( [] )
# 1426 "parser.ml"
               : 'mandala_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 224 "parser.mly"
   ({ lshape = _2;
				lradius = _4;
				lcount = _6;
				loffset = _8;
				langularshift = _10 })
# 1441 "parser.ml"
               : 'layer_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 230 "parser.mly"
   ({ lshape = _2;
				lradius = _4;
				lcount = _6;
				loffset = _8;
				langularshift = 0 })
# 1455 "parser.ml"
               : 'layer_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 236 "parser.mly"
   ({ lshape = _2;
				lradius = _4;
				lcount = _6;
				loffset = 0;
				langularshift = _8 })
# 1469 "parser.ml"
               : 'layer_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 242 "parser.mly"
   ({ lshape = _2;
				lradius = _4;
				lcount = _6;
				loffset = 0;
				langularshift = 0})
# 1482 "parser.ml"
               : 'layer_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 249 "parser.mly"
  ({ sgeoname = _2;
		ssize = _4;
		scolor = _6;
		srotation = _8 })
# 1495 "parser.ml"
               : 'shape_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 254 "parser.mly"
  ({ sgeoname = _2;
		ssize = _4;
		scolor = _6;
		srotation = 0 })
# 1507 "parser.ml"
               : 'shape_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 259 "parser.mly"
  ({ sgeoname = _2;
		ssize = _4;
		scolor = 0;
		srotation = _6 })
# 1519 "parser.ml"
               : 'shape_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 264 "parser.mly"
 ({ sgeoname = _2;
		ssize = _4;
		scolor = 0;
		srotation = 0 })
# 1530 "parser.ml"
               : 'shape_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 270 "parser.mly"
                       ( Binop(_1, Add, _3) )
# 1538 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 271 "parser.mly"
                       ( Binop(_1, Sub, _3) )
# 1546 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 272 "parser.mly"
                       ( Binop(_1, Mul, _3) )
# 1554 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 273 "parser.mly"
                       ( Binop(_1, Div, _3) )
# 1562 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 274 "parser.mly"
                       ( Lit(_1) )
# 1569 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 275 "parser.mly"
                     ( Var(_1) )
# 1576 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 276 "parser.mly"
                     ( Asn(_1, _3) )
# 1584 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 277 "parser.mly"
                       ( Seq(_1, _3) )
# 1592 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 278 "parser.mly"
                       ( Col(_1, _3) )
# 1600 "parser.ml"
               : 'expr))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
