type token =
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | LBRACE
  | RBRACE
  | COLON
  | COMMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MODULUS
  | EXP
  | ASSIGN
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | RETURN
  | IF
  | ELSE
  | FOREACH
  | BREAK
  | CONTINUE
  | TRUE
  | FALSE
  | AND
  | OR
  | NOT
  | XOR
  | TO
  | DEF
  | DRAW
  | CREATE
  | ADDTO
  | RADIUS
  | COUNT
  | SIZE
  | COLOR
  | ROTATION
  | OFFSET
  | ANGULARSHIFT
  | NUMBER
  | BOOLEAN
  | SHAPE
  | STRING
  | VOID
  | GEO
  | LAYER
  | MANDALA
  | CIRCLE
  | TRIANGLE
  | SQUARE
  | LITERAL of (int)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast;; 
# 67 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACKET *);
  260 (* RBRACKET *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* COLON *);
  264 (* COMMMA *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* MODULUS *);
  270 (* EXP *);
  271 (* ASSIGN *);
  272 (* EQ *);
  273 (* NEQ *);
  274 (* LT *);
  275 (* LEQ *);
  276 (* GT *);
  277 (* GEQ *);
  278 (* RETURN *);
  279 (* IF *);
  280 (* ELSE *);
  281 (* FOREACH *);
  282 (* BREAK *);
  283 (* CONTINUE *);
  284 (* TRUE *);
  285 (* FALSE *);
  286 (* AND *);
  287 (* OR *);
  288 (* NOT *);
  289 (* XOR *);
  290 (* TO *);
  291 (* DEF *);
  292 (* DRAW *);
  293 (* CREATE *);
  294 (* ADDTO *);
  295 (* RADIUS *);
  296 (* COUNT *);
  297 (* SIZE *);
  298 (* COLOR *);
  299 (* ROTATION *);
  300 (* OFFSET *);
  301 (* ANGULARSHIFT *);
  302 (* NUMBER *);
  303 (* BOOLEAN *);
  304 (* SHAPE *);
  305 (* STRING *);
  306 (* VOID *);
  307 (* GEO *);
  308 (* LAYER *);
  309 (* MANDALA *);
  310 (* CIRCLE *);
  311 (* TRIANGLE *);
  312 (* SQUARE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  313 (* LITERAL *);
  314 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\003\000\003\000\003\000\
\003\000\003\000\003\000\006\000\006\000\009\000\009\000\010\000\
\010\000\010\000\010\000\010\000\010\000\007\000\007\000\004\000\
\004\000\004\000\004\000\004\000\004\000\008\000\008\000\011\000\
\011\000\011\000\011\000\011\000\013\000\013\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\014\000\014\000\015\000\015\000\005\000\
\005\000\005\000\016\000\016\000\016\000\017\000\018\000\018\000\
\018\000\018\000\019\000\019\000\019\000\019\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\009\000\009\000\009\000\
\009\000\009\000\009\000\000\000\001\000\001\000\003\000\002\000\
\002\000\002\000\002\000\002\000\002\000\000\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\000\000\002\000\001\000\
\002\000\005\000\007\000\006\000\000\000\001\000\001\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\004\000\003\000\
\003\000\003\000\003\000\000\000\001\000\001\000\003\000\005\000\
\005\000\005\000\001\000\001\000\001\000\000\000\010\000\008\000\
\008\000\006\000\008\000\006\000\006\000\004\000\003\000\003\000\
\003\000\003\000\001\000\001\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\088\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\003\000\004\000\005\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\028\000\024\000\027\000\026\000\029\000\025\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\066\000\067\000\068\000\069\000\065\000\064\000\020\000\
\016\000\019\000\018\000\021\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\000\000\000\000\000\000\022\000\015\000\022\000\022\000\022\000\
\022\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\054\000\000\000\000\000\000\000\
\000\000\052\000\000\000\000\000\000\000\058\000\000\000\059\000\
\000\000\043\000\044\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\031\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\036\000\035\000"

let yydgoto = "\002\000\
\003\000\004\000\014\000\149\000\016\000\056\000\119\000\150\000\
\057\000\058\000\164\000\165\000\173\000\130\000\131\000\066\000\
\067\000\068\000\069\000"

let yysindex = "\003\000\
\000\000\000\000\000\000\054\002\054\255\041\255\204\254\224\254\
\226\254\234\254\005\255\010\255\000\000\000\000\000\000\000\000\
\025\255\026\255\033\255\034\255\046\255\050\255\052\255\053\255\
\065\255\000\000\000\000\000\000\000\000\000\000\000\000\129\255\
\130\255\131\255\137\255\138\255\140\255\139\255\141\255\149\255\
\187\255\187\255\187\255\187\255\187\255\187\255\235\254\235\254\
\235\254\089\255\103\255\104\255\105\255\112\255\113\255\170\255\
\114\255\000\000\177\255\178\255\186\255\196\255\197\255\023\255\
\023\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\182\255\187\255\193\255\
\200\255\202\255\210\255\212\255\023\255\216\255\224\255\000\000\
\075\255\185\255\211\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\254\254\023\255\023\255\023\255\023\255\023\255\
\023\255\076\255\078\255\023\255\023\255\023\255\023\255\023\255\
\023\255\023\255\023\255\023\255\023\255\023\255\198\255\198\255\
\198\255\198\255\198\255\198\255\000\000\000\255\000\255\133\255\
\033\005\000\000\183\255\033\005\059\005\000\000\000\255\000\000\
\000\255\000\000\000\000\108\255\108\255\253\255\253\255\253\255\
\253\255\139\004\059\005\148\255\000\000\012\255\012\255\012\255\
\012\255\012\255\012\255\000\000\023\255\023\255\023\255\023\255\
\023\255\236\255\023\255\000\000\033\005\059\005\166\255\254\004\
\033\005\033\005\023\255\033\005\208\255\023\255\023\255\023\255\
\055\255\023\255\014\005\033\005\033\005\012\255\241\255\023\255\
\246\255\012\255\033\005\012\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\000\002\000\002\000\002\000\002\000\002\000\020\000\020\000\
\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\032\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\163\004\163\004\
\163\004\163\004\163\004\163\004\000\000\061\000\121\000\000\000\
\193\003\000\000\133\003\253\003\206\002\000\000\181\000\000\000\
\241\000\000\000\000\000\086\002\146\002\048\001\108\001\168\001\
\228\001\000\000\010\003\114\002\000\000\174\002\234\002\038\003\
\152\003\173\003\212\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\254\255\000\000\080\004\070\003\233\003\021\004\
\141\004\117\004\000\000\255\255\000\000\000\000\000\000\000\000\
\000\000\027\000\160\004\180\004\188\004\000\000\000\000\000\000\
\043\004\000\000\207\004\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\033\001\000\000\170\000\159\000\163\000\
\000\000\216\000\099\255\194\255\129\000\000\000\000\000\011\000\
\000\000\000\000\000\000"

let yytablesize = 1629
let yytable = "\125\000\
\040\000\090\000\091\000\001\000\105\000\026\000\106\000\107\000\
\108\000\109\000\108\000\109\000\085\000\110\000\111\000\112\000\
\113\000\114\000\115\000\070\000\086\000\087\000\099\000\085\000\
\185\000\027\000\064\000\028\000\189\000\065\000\190\000\086\000\
\087\000\161\000\162\000\029\000\163\000\126\000\127\000\128\000\
\129\000\132\000\133\000\135\000\137\000\138\000\139\000\140\000\
\141\000\142\000\143\000\144\000\145\000\146\000\147\000\148\000\
\182\000\117\000\070\000\071\000\056\000\105\000\030\000\106\000\
\107\000\108\000\109\000\031\000\088\000\089\000\110\000\111\000\
\112\000\113\000\114\000\115\000\085\000\102\000\085\000\088\000\
\089\000\103\000\032\000\033\000\134\000\087\000\086\000\136\000\
\023\000\104\000\034\000\035\000\024\000\025\000\166\000\167\000\
\168\000\169\000\170\000\017\000\172\000\018\000\019\000\036\000\
\020\000\021\000\022\000\037\000\177\000\038\000\039\000\179\000\
\180\000\181\000\117\000\172\000\106\000\107\000\108\000\109\000\
\057\000\187\000\040\000\110\000\111\000\112\000\113\000\114\000\
\115\000\041\000\042\000\043\000\088\000\089\000\088\000\089\000\
\156\000\044\000\045\000\105\000\046\000\106\000\107\000\108\000\
\109\000\047\000\072\000\048\000\110\000\111\000\112\000\113\000\
\114\000\115\000\105\000\049\000\106\000\107\000\108\000\109\000\
\073\000\074\000\075\000\110\000\111\000\112\000\113\000\114\000\
\115\000\076\000\077\000\078\000\105\000\079\000\106\000\107\000\
\108\000\109\000\080\000\081\000\041\000\110\000\111\000\112\000\
\113\000\114\000\115\000\082\000\092\000\159\000\160\000\105\000\
\117\000\106\000\107\000\108\000\109\000\083\000\084\000\094\000\
\110\000\111\000\112\000\113\000\114\000\115\000\095\000\117\000\
\096\000\174\000\175\000\059\000\060\000\061\000\062\000\063\000\
\097\000\105\000\098\000\106\000\107\000\108\000\109\000\116\000\
\100\000\117\000\110\000\111\000\112\000\113\000\114\000\115\000\
\050\000\101\000\051\000\052\000\171\000\053\000\054\000\055\000\
\042\000\178\000\157\000\007\000\117\000\008\000\009\000\186\000\
\010\000\011\000\012\000\118\000\120\000\121\000\122\000\123\000\
\124\000\040\000\040\000\012\000\040\000\106\000\107\000\108\000\
\109\000\040\000\040\000\040\000\040\000\188\000\117\000\013\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\151\000\152\000\153\000\154\000\155\000\037\000\
\038\000\037\000\040\000\040\000\015\000\040\000\093\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\047\000\
\040\000\040\000\183\000\040\000\040\000\040\000\070\000\000\000\
\070\000\040\000\040\000\000\000\040\000\056\000\056\000\000\000\
\056\000\070\000\000\000\056\000\070\000\056\000\056\000\070\000\
\070\000\000\000\000\000\000\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\056\000\056\000\
\000\000\056\000\000\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\048\000\056\000\056\000\000\000\056\000\
\056\000\056\000\000\000\000\000\000\000\056\000\056\000\000\000\
\056\000\057\000\057\000\000\000\057\000\000\000\000\000\057\000\
\000\000\057\000\057\000\000\000\000\000\000\000\000\000\000\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\057\000\057\000\000\000\057\000\000\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\049\000\
\057\000\057\000\000\000\057\000\057\000\057\000\000\000\000\000\
\000\000\057\000\057\000\000\000\057\000\041\000\041\000\000\000\
\041\000\000\000\000\000\041\000\000\000\041\000\041\000\000\000\
\000\000\000\000\000\000\000\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\041\000\
\000\000\041\000\000\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\050\000\041\000\041\000\000\000\041\000\
\041\000\041\000\000\000\000\000\000\000\041\000\041\000\000\000\
\041\000\042\000\042\000\000\000\042\000\000\000\000\000\042\000\
\000\000\042\000\042\000\000\000\000\000\000\000\000\000\000\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000\042\000\000\000\042\000\000\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\060\000\
\042\000\042\000\000\000\042\000\042\000\042\000\000\000\000\000\
\000\000\042\000\042\000\000\000\042\000\000\000\000\000\000\000\
\047\000\047\000\000\000\047\000\000\000\013\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\047\000\047\000\000\000\047\000\045\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\000\000\047\000\
\047\000\000\000\047\000\047\000\047\000\000\000\000\000\000\000\
\047\000\047\000\000\000\047\000\048\000\048\000\000\000\048\000\
\000\000\078\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\048\000\000\000\
\048\000\046\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\000\000\048\000\048\000\000\000\048\000\048\000\
\048\000\000\000\000\000\000\000\048\000\048\000\000\000\048\000\
\049\000\049\000\000\000\049\000\000\000\010\000\049\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\049\000\049\000\000\000\049\000\087\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\000\000\049\000\
\049\000\000\000\049\000\049\000\049\000\000\000\000\000\000\000\
\049\000\049\000\000\000\049\000\050\000\050\000\000\000\050\000\
\000\000\008\000\050\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\050\000\050\000\000\000\
\050\000\053\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\000\000\050\000\050\000\000\000\050\000\050\000\
\050\000\000\000\000\000\000\000\050\000\050\000\000\000\050\000\
\000\000\060\000\000\000\060\000\000\000\011\000\060\000\000\000\
\000\000\000\000\060\000\060\000\000\000\000\000\000\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\060\000\060\000\000\000\060\000\063\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\000\000\060\000\
\060\000\000\000\060\000\060\000\060\000\000\000\045\000\045\000\
\005\000\045\000\006\000\060\000\045\000\000\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\008\000\009\000\000\000\
\010\000\011\000\012\000\045\000\045\000\045\000\045\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\045\000\000\000\045\000\000\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\061\000\045\000\045\000\000\000\
\045\000\045\000\045\000\000\000\000\000\000\000\045\000\045\000\
\000\000\045\000\046\000\046\000\078\000\046\000\078\000\009\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\078\000\
\000\000\078\000\078\000\000\000\078\000\078\000\078\000\046\000\
\046\000\046\000\046\000\000\000\007\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\000\046\000\000\000\046\000\000\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\062\000\046\000\046\000\000\000\046\000\046\000\046\000\000\000\
\000\000\000\000\046\000\046\000\000\000\046\000\087\000\087\000\
\010\000\087\000\010\000\006\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\000\000\010\000\010\000\000\000\
\010\000\010\000\010\000\087\000\087\000\087\000\087\000\000\000\
\074\000\000\000\000\000\000\000\000\000\000\000\000\000\087\000\
\087\000\000\000\087\000\000\000\087\000\087\000\087\000\087\000\
\087\000\087\000\087\000\087\000\051\000\087\000\087\000\000\000\
\087\000\087\000\087\000\000\000\000\000\000\000\087\000\087\000\
\000\000\087\000\053\000\053\000\008\000\053\000\008\000\000\000\
\000\000\000\000\000\000\000\000\076\000\000\000\000\000\008\000\
\000\000\008\000\008\000\000\000\008\000\008\000\008\000\053\000\
\053\000\053\000\053\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\034\000\053\000\053\000\000\000\053\000\000\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\000\000\053\000\053\000\000\000\053\000\053\000\053\000\000\000\
\000\000\000\000\053\000\053\000\000\000\053\000\063\000\063\000\
\011\000\063\000\011\000\000\000\000\000\000\000\000\000\032\000\
\000\000\000\000\000\000\011\000\000\000\011\000\011\000\000\000\
\011\000\011\000\011\000\063\000\063\000\063\000\063\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\063\000\
\063\000\000\000\063\000\000\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\033\000\063\000\063\000\000\000\
\063\000\063\000\063\000\000\000\000\000\000\000\063\000\063\000\
\000\000\063\000\000\000\000\000\000\000\061\000\061\000\000\000\
\061\000\000\000\000\000\061\000\077\000\061\000\061\000\061\000\
\061\000\000\000\000\000\000\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\000\000\072\000\
\000\000\000\000\030\000\000\000\000\000\000\000\061\000\061\000\
\000\000\061\000\000\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\073\000\061\000\061\000\000\000\061\000\
\061\000\061\000\009\000\075\000\009\000\061\000\061\000\000\000\
\000\000\062\000\062\000\000\000\062\000\009\000\000\000\009\000\
\009\000\000\000\009\000\009\000\009\000\000\000\071\000\007\000\
\000\000\007\000\000\000\000\000\000\000\000\000\062\000\062\000\
\062\000\062\000\007\000\000\000\007\000\007\000\000\000\007\000\
\007\000\007\000\062\000\062\000\000\000\062\000\000\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\000\000\
\062\000\062\000\000\000\062\000\062\000\062\000\006\000\000\000\
\006\000\062\000\062\000\000\000\000\000\051\000\051\000\000\000\
\051\000\006\000\000\000\006\000\006\000\000\000\006\000\006\000\
\006\000\000\000\000\000\074\000\000\000\074\000\000\000\000\000\
\000\000\000\000\051\000\051\000\051\000\051\000\074\000\000\000\
\074\000\074\000\000\000\074\000\074\000\074\000\051\000\051\000\
\000\000\051\000\000\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\034\000\051\000\051\000\000\000\051\000\
\051\000\051\000\000\000\034\000\034\000\051\000\051\000\076\000\
\000\000\076\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\034\000\076\000\034\000\076\000\076\000\000\000\076\000\
\076\000\076\000\000\000\000\000\000\000\034\000\000\000\034\000\
\032\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\000\000\034\000\034\000\000\000\034\000\034\000\034\000\
\000\000\000\000\000\000\034\000\034\000\032\000\032\000\032\000\
\032\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\032\000\000\000\032\000\033\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\000\000\000\032\000\
\032\000\000\000\032\000\032\000\032\000\000\000\000\000\000\000\
\032\000\032\000\033\000\033\000\033\000\033\000\000\000\000\000\
\000\000\105\000\000\000\106\000\107\000\108\000\109\000\033\000\
\000\000\033\000\110\000\111\000\112\000\113\000\114\000\115\000\
\000\000\000\000\033\000\030\000\033\000\033\000\000\000\033\000\
\033\000\033\000\000\000\030\000\030\000\033\000\033\000\077\000\
\000\000\077\000\158\000\000\000\000\000\000\000\000\000\000\000\
\030\000\030\000\077\000\030\000\077\000\077\000\000\000\077\000\
\077\000\077\000\072\000\000\000\072\000\030\000\117\000\030\000\
\000\000\000\000\000\000\000\000\000\000\072\000\000\000\072\000\
\072\000\000\000\072\000\072\000\072\000\000\000\073\000\000\000\
\073\000\000\000\000\000\030\000\030\000\000\000\075\000\000\000\
\075\000\073\000\000\000\073\000\073\000\000\000\073\000\073\000\
\073\000\075\000\000\000\075\000\075\000\000\000\075\000\075\000\
\075\000\071\000\000\000\071\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\071\000\000\000\071\000\071\000\
\000\000\071\000\071\000\071\000\105\000\000\000\106\000\107\000\
\108\000\109\000\000\000\000\000\000\000\110\000\111\000\112\000\
\113\000\114\000\115\000\000\000\105\000\000\000\106\000\107\000\
\108\000\109\000\000\000\000\000\000\000\110\000\111\000\112\000\
\113\000\114\000\115\000\000\000\000\000\000\000\000\000\105\000\
\176\000\106\000\107\000\108\000\109\000\000\000\000\000\000\000\
\110\000\111\000\112\000\113\000\114\000\115\000\000\000\000\000\
\000\000\117\000\184\000\000\000\000\000\000\000\000\000\000\000\
\000\000\105\000\000\000\106\000\107\000\108\000\109\000\000\000\
\000\000\117\000\110\000\111\000\112\000\113\000\114\000\115\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\117\000"

let yycheck = "\002\001\
\000\000\064\000\065\000\001\000\007\001\058\001\009\001\010\001\
\011\001\012\001\011\001\012\001\001\001\016\001\017\001\018\001\
\019\001\020\001\021\001\000\000\009\001\010\001\085\000\001\001\
\182\000\058\001\048\001\058\001\186\000\051\001\188\000\009\001\
\010\001\022\001\023\001\058\001\025\001\100\000\101\000\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\113\000\114\000\115\000\116\000\117\000\118\000\
\002\001\060\001\048\000\049\000\000\000\007\001\058\001\009\001\
\010\001\011\001\012\001\058\001\057\001\058\001\016\001\017\001\
\018\001\019\001\020\001\021\001\001\001\003\001\001\001\057\001\
\058\001\007\001\058\001\058\001\009\001\010\001\009\001\010\001\
\048\001\015\001\058\001\058\001\052\001\053\001\157\000\158\000\
\159\000\160\000\161\000\046\001\163\000\048\001\049\001\058\001\
\051\001\052\001\053\001\058\001\171\000\058\001\058\001\174\000\
\175\000\176\000\060\001\178\000\009\001\010\001\011\001\012\001\
\000\000\184\000\058\001\016\001\017\001\018\001\019\001\020\001\
\021\001\001\001\001\001\001\001\057\001\058\001\057\001\058\001\
\004\001\001\001\001\001\007\001\001\001\009\001\010\001\011\001\
\012\001\007\001\058\001\007\001\016\001\017\001\018\001\019\001\
\020\001\021\001\007\001\007\001\009\001\010\001\011\001\012\001\
\058\001\058\001\058\001\016\001\017\001\018\001\019\001\020\001\
\021\001\058\001\058\001\002\001\007\001\060\001\009\001\010\001\
\011\001\012\001\002\001\002\001\000\000\016\001\017\001\018\001\
\019\001\020\001\021\001\002\001\007\001\042\001\043\001\007\001\
\060\001\009\001\010\001\011\001\012\001\002\001\002\001\007\001\
\016\001\017\001\018\001\019\001\020\001\021\001\007\001\060\001\
\007\001\044\001\045\001\042\000\043\000\044\000\045\000\046\000\
\007\001\007\001\007\001\009\001\010\001\011\001\012\001\039\001\
\009\001\060\001\016\001\017\001\018\001\019\001\020\001\021\001\
\046\001\010\001\048\001\049\001\001\001\051\001\052\001\053\001\
\000\000\034\001\060\001\046\001\060\001\048\001\049\001\007\001\
\051\001\052\001\053\001\041\001\094\000\095\000\096\000\097\000\
\098\000\001\001\002\001\002\001\004\001\009\001\010\001\011\001\
\012\001\009\001\010\001\011\001\012\001\024\001\060\001\002\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\120\000\121\000\122\000\123\000\124\000\034\001\
\034\001\007\001\034\001\035\001\004\000\037\001\079\000\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\000\000\
\048\001\049\001\178\000\051\001\052\001\053\001\035\001\255\255\
\037\001\057\001\058\001\255\255\060\001\001\001\002\001\255\255\
\004\001\046\001\255\255\007\001\049\001\009\001\010\001\052\001\
\053\001\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\034\001\035\001\
\255\255\037\001\255\255\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\000\000\048\001\049\001\255\255\051\001\
\052\001\053\001\255\255\255\255\255\255\057\001\058\001\255\255\
\060\001\001\001\002\001\255\255\004\001\255\255\255\255\007\001\
\255\255\009\001\010\001\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\034\001\035\001\255\255\037\001\255\255\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\000\000\
\048\001\049\001\255\255\051\001\052\001\053\001\255\255\255\255\
\255\255\057\001\058\001\255\255\060\001\001\001\002\001\255\255\
\004\001\255\255\255\255\007\001\255\255\009\001\010\001\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\034\001\035\001\
\255\255\037\001\255\255\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\000\000\048\001\049\001\255\255\051\001\
\052\001\053\001\255\255\255\255\255\255\057\001\058\001\255\255\
\060\001\001\001\002\001\255\255\004\001\255\255\255\255\007\001\
\255\255\009\001\010\001\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\034\001\035\001\255\255\037\001\255\255\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\000\000\
\048\001\049\001\255\255\051\001\052\001\053\001\255\255\255\255\
\255\255\057\001\058\001\255\255\060\001\255\255\255\255\255\255\
\001\001\002\001\255\255\004\001\255\255\000\000\007\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\034\001\035\001\255\255\037\001\000\000\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\255\255\048\001\
\049\001\255\255\051\001\052\001\053\001\255\255\255\255\255\255\
\057\001\058\001\255\255\060\001\001\001\002\001\255\255\004\001\
\255\255\000\000\007\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\034\001\035\001\255\255\
\037\001\000\000\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\255\255\048\001\049\001\255\255\051\001\052\001\
\053\001\255\255\255\255\255\255\057\001\058\001\255\255\060\001\
\001\001\002\001\255\255\004\001\255\255\000\000\007\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\034\001\035\001\255\255\037\001\000\000\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\255\255\048\001\
\049\001\255\255\051\001\052\001\053\001\255\255\255\255\255\255\
\057\001\058\001\255\255\060\001\001\001\002\001\255\255\004\001\
\255\255\000\000\007\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\034\001\035\001\255\255\
\037\001\000\000\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\255\255\048\001\049\001\255\255\051\001\052\001\
\053\001\255\255\255\255\255\255\057\001\058\001\255\255\060\001\
\255\255\002\001\255\255\004\001\255\255\000\000\007\001\255\255\
\255\255\255\255\011\001\012\001\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\034\001\035\001\255\255\037\001\000\000\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\255\255\048\001\
\049\001\255\255\051\001\052\001\053\001\255\255\001\001\002\001\
\035\001\004\001\037\001\060\001\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\046\001\255\255\048\001\049\001\255\255\
\051\001\052\001\053\001\022\001\023\001\024\001\025\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\034\001\
\035\001\255\255\037\001\255\255\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\000\000\048\001\049\001\255\255\
\051\001\052\001\053\001\255\255\255\255\255\255\057\001\058\001\
\255\255\060\001\001\001\002\001\035\001\004\001\037\001\000\000\
\007\001\255\255\255\255\255\255\255\255\255\255\255\255\046\001\
\255\255\048\001\049\001\255\255\051\001\052\001\053\001\022\001\
\023\001\024\001\025\001\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\034\001\035\001\255\255\037\001\255\255\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\000\000\048\001\049\001\255\255\051\001\052\001\053\001\255\255\
\255\255\255\255\057\001\058\001\255\255\060\001\001\001\002\001\
\035\001\004\001\037\001\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\046\001\255\255\048\001\049\001\255\255\
\051\001\052\001\053\001\022\001\023\001\024\001\025\001\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\034\001\
\035\001\255\255\037\001\255\255\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\000\000\048\001\049\001\255\255\
\051\001\052\001\053\001\255\255\255\255\255\255\057\001\058\001\
\255\255\060\001\001\001\002\001\035\001\004\001\037\001\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\046\001\
\255\255\048\001\049\001\255\255\051\001\052\001\053\001\022\001\
\023\001\024\001\025\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\034\001\035\001\255\255\037\001\255\255\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\255\255\048\001\049\001\255\255\051\001\052\001\053\001\255\255\
\255\255\255\255\057\001\058\001\255\255\060\001\001\001\002\001\
\035\001\004\001\037\001\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\046\001\255\255\048\001\049\001\255\255\
\051\001\052\001\053\001\022\001\023\001\024\001\025\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\034\001\
\035\001\255\255\037\001\255\255\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\000\000\048\001\049\001\255\255\
\051\001\052\001\053\001\255\255\255\255\255\255\057\001\058\001\
\255\255\060\001\255\255\255\255\255\255\001\001\002\001\255\255\
\004\001\255\255\255\255\007\001\000\000\009\001\010\001\011\001\
\012\001\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\000\000\
\255\255\255\255\000\000\255\255\255\255\255\255\034\001\035\001\
\255\255\037\001\255\255\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\000\000\048\001\049\001\255\255\051\001\
\052\001\053\001\035\001\000\000\037\001\057\001\058\001\255\255\
\255\255\001\001\002\001\255\255\004\001\046\001\255\255\048\001\
\049\001\255\255\051\001\052\001\053\001\255\255\000\000\035\001\
\255\255\037\001\255\255\255\255\255\255\255\255\022\001\023\001\
\024\001\025\001\046\001\255\255\048\001\049\001\255\255\051\001\
\052\001\053\001\034\001\035\001\255\255\037\001\255\255\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\255\255\
\048\001\049\001\255\255\051\001\052\001\053\001\035\001\255\255\
\037\001\057\001\058\001\255\255\255\255\001\001\002\001\255\255\
\004\001\046\001\255\255\048\001\049\001\255\255\051\001\052\001\
\053\001\255\255\255\255\035\001\255\255\037\001\255\255\255\255\
\255\255\255\255\022\001\023\001\024\001\025\001\046\001\255\255\
\048\001\049\001\255\255\051\001\052\001\053\001\034\001\035\001\
\255\255\037\001\255\255\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\001\001\048\001\049\001\255\255\051\001\
\052\001\053\001\255\255\009\001\010\001\057\001\058\001\035\001\
\255\255\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\022\001\023\001\046\001\025\001\048\001\049\001\255\255\051\001\
\052\001\053\001\255\255\255\255\255\255\035\001\255\255\037\001\
\001\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\046\001\255\255\048\001\049\001\255\255\051\001\052\001\053\001\
\255\255\255\255\255\255\057\001\058\001\022\001\023\001\024\001\
\025\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\035\001\255\255\037\001\001\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\046\001\255\255\048\001\
\049\001\255\255\051\001\052\001\053\001\255\255\255\255\255\255\
\057\001\058\001\022\001\023\001\024\001\025\001\255\255\255\255\
\255\255\007\001\255\255\009\001\010\001\011\001\012\001\035\001\
\255\255\037\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\046\001\001\001\048\001\049\001\255\255\051\001\
\052\001\053\001\255\255\009\001\010\001\057\001\058\001\035\001\
\255\255\037\001\040\001\255\255\255\255\255\255\255\255\255\255\
\022\001\023\001\046\001\025\001\048\001\049\001\255\255\051\001\
\052\001\053\001\035\001\255\255\037\001\035\001\060\001\037\001\
\255\255\255\255\255\255\255\255\255\255\046\001\255\255\048\001\
\049\001\255\255\051\001\052\001\053\001\255\255\035\001\255\255\
\037\001\255\255\255\255\057\001\058\001\255\255\035\001\255\255\
\037\001\046\001\255\255\048\001\049\001\255\255\051\001\052\001\
\053\001\046\001\255\255\048\001\049\001\255\255\051\001\052\001\
\053\001\035\001\255\255\037\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\046\001\255\255\048\001\049\001\
\255\255\051\001\052\001\053\001\007\001\255\255\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\007\001\255\255\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\007\001\
\043\001\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\060\001\045\001\255\255\255\255\255\255\255\255\255\255\
\255\255\007\001\255\255\009\001\010\001\011\001\012\001\255\255\
\255\255\060\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  LBRACE\000\
  RBRACE\000\
  COLON\000\
  COMMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MODULUS\000\
  EXP\000\
  ASSIGN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOREACH\000\
  BREAK\000\
  CONTINUE\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  NOT\000\
  XOR\000\
  TO\000\
  DEF\000\
  DRAW\000\
  CREATE\000\
  ADDTO\000\
  RADIUS\000\
  COUNT\000\
  SIZE\000\
  COLOR\000\
  ROTATION\000\
  OFFSET\000\
  ANGULARSHIFT\000\
  NUMBER\000\
  BOOLEAN\000\
  SHAPE\000\
  STRING\000\
  VOID\000\
  GEO\000\
  LAYER\000\
  MANDALA\000\
  CIRCLE\000\
  TRIANGLE\000\
  SQUARE\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 33 "parser.mly"
            ( _1 )
# 732 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
               ( [], [] )
# 738 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 37 "parser.mly"
               ( fst _1, (_2 :: snd _1) )
# 746 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 38 "parser.mly"
               ( (_2 :: fst _1), snd _1 )
# 754 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cdecl) in
    Obj.repr(
# 39 "parser.mly"
               ( fst _1, (_2 :: snd _1) )
# 762 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 43 "parser.mly"
  ( { fname = _3;
		returntype = Mandalat;
		formals = _5;
		locals = List.rev _8;
		body = List.rev _9 })
# 776 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 49 "parser.mly"
  ( { fname = _3;
		returntype = Layert;
		formals = _5;
		locals = List.rev _8;
		body = List.rev _9 })
# 790 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 55 "parser.mly"
  ( { fname = _3;
		returntype = Shapet;
		formals = _5;
		locals = List.rev _8;
		body = List.rev _9 })
# 804 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 61 "parser.mly"
  ( { fname = _3;
		returntype = Geot;
		formals = _5;
		locals = List.rev _8;
		body = List.rev _9 })
# 818 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 67 "parser.mly"
  ( { fname = _3;
		returntype = Numbert;
		formals = _5;
		locals = List.rev _8;
		body = List.rev _9 })
# 832 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 73 "parser.mly"
  ( { fname = _3;
		returntype = Stringt;
		formals = _5;
		locals = List.rev _8;
		body = List.rev _9 })
# 846 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                              ( [] )
# 852 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 84 "parser.mly"
                   ( List.rev _1 )
# 859 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 95 "parser.mly"
           ( [_1] )
# 866 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 96 "parser.mly"
                            ( _3 :: _1 )
# 874 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 99 "parser.mly"
              ({ kind = Shapet; vname = _2;})
# 881 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 100 "parser.mly"
               ({ kind = Mandalat; vname = _2;})
# 888 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 101 "parser.mly"
            ({ kind = Geot; vname = _2;})
# 895 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 102 "parser.mly"
              ({ kind = Stringt; vname = _2;})
# 902 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 103 "parser.mly"
              ({ kind = Numbert; vname = _2;})
# 909 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 104 "parser.mly"
              ({ kind = Layert; vname = _2;})
# 916 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "parser.mly"
                   ( [] )
# 922 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 107 "parser.mly"
                       ( _2 :: _1 )
# 930 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "parser.mly"
              ({ kind = Shapet; vname = _2;})
# 937 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "parser.mly"
               ({ kind = Mandalat; vname = _2;})
# 944 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 111 "parser.mly"
            ({ kind = Geot; vname = _2;})
# 951 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 112 "parser.mly"
              ({ kind = Stringt; vname = _2;})
# 958 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 113 "parser.mly"
              ({ kind = Numbert; vname = _2;})
# 965 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 114 "parser.mly"
              ({ kind = Layert; vname = _2;})
# 972 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "parser.mly"
                   ( [] )
# 978 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 117 "parser.mly"
                     ( _2 :: _1 )
# 986 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
               ( Expr(_1) )
# 993 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                       ( Return(_2) )
# 1000 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 122 "parser.mly"
                                            ( IF(_3, _5, Block([])) )
# 1008 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 123 "parser.mly"
                                          ( IF(_3, _5, _7) )
# 1017 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 124 "parser.mly"
                                            ( Foreach(_2, _4, _6) )
# 1026 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "parser.mly"
                 ( Noexpr )
# 1032 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
           ( _1 )
# 1039 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 131 "parser.mly"
              ( Literal(_1) )
# 1046 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 132 "parser.mly"
            ( Id(_1) )
# 1053 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                    ( Binop(_1, Add, _3) )
# 1061 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                     ( Binop(_1, Sub, _3) )
# 1069 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                      ( Binop(_1, Mult, _3) )
# 1077 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                       ( Binop(_1, Div, _3) )
# 1085 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                   ( Binop(_1, Equal, _3) )
# 1093 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                    ( Binop(_1, Neq, _3) )
# 1101 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                    ( Binop(_1, Less, _3) )
# 1109 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                    ( Binop(_1, Leq, _3) )
# 1117 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                   ( Binop(_1, Greater, _3) )
# 1125 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
                    ( Binop(_1, Geq, _3) )
# 1133 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                     ( Assign(_1, _3) )
# 1141 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_opt) in
    Obj.repr(
# 144 "parser.mly"
                          ( Call(_1, _3) )
# 1149 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                     ( Binop(_1, Comm, _3) )
# 1157 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                        ( _2 )
# 1164 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
                             ( Array(_1, _3) )
# 1172 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
                    ( PrefixPlus(_3) )
# 1179 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 149 "parser.mly"
                       ( PrefixMinus(_3) )
# 1186 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 150 "parser.mly"
                    ( PostfixPlus(_1) )
# 1193 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 151 "parser.mly"
                      ( PostfixMinus(_1) )
# 1200 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "parser.mly"
                   ( [ ] )
# 1206 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 155 "parser.mly"
                    ( List.rev _1 )
# 1213 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
              ( [_1] )
# 1220 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 158 "parser.mly"
                              ( _3 :: _1 )
# 1228 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'construct_args) in
    Obj.repr(
# 164 "parser.mly"
  ({ fname = _3;
			returntype = Mandalat;
			formals = _5;
		})
# 1239 "parser.ml"
               : 'cdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'construct_args) in
    Obj.repr(
# 169 "parser.mly"
  ({ fname = _3;
			returntype = Layert;
			formals = _5;
		})
# 1250 "parser.ml"
               : 'cdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'construct_args) in
    Obj.repr(
# 174 "parser.mly"
  ({ fname = _3;
			returntype = Shapet;
			formals = _5;
		})
# 1261 "parser.ml"
               : 'cdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mandala_args) in
    Obj.repr(
# 180 "parser.mly"
                ( [] )
# 1268 "parser.ml"
               : 'construct_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'layer_args) in
    Obj.repr(
# 181 "parser.mly"
               ( List.rev _1 )
# 1275 "parser.ml"
               : 'construct_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'shape_args) in
    Obj.repr(
# 182 "parser.mly"
                ( List.rev _1 )
# 1282 "parser.ml"
               : 'construct_args))
; (fun __caml_parser_env ->
    Obj.repr(
# 185 "parser.mly"
                ( [] )
# 1288 "parser.ml"
               : 'mandala_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 188 "parser.mly"
   ({ lshape = _2;
				lradius = _4;
				lcount = _6;
				loffset = _8;
				langularshift = _10 })
# 1303 "parser.ml"
               : 'layer_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 194 "parser.mly"
   ({ lshape = _2;
				lradius = _4;
				lcount = _6;
				loffset = _8;
				langularshift = 0 })
# 1317 "parser.ml"
               : 'layer_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 200 "parser.mly"
   ({ lshape = _2;
				lradius = _4;
				lcount = _6;
				loffset = 0;
				langularshift = _8 })
# 1331 "parser.ml"
               : 'layer_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 206 "parser.mly"
   ({ lshape = _2;
				lradius = _4;
				lcount = _6;
				loffset = 0;
				langularshift = 0})
# 1344 "parser.ml"
               : 'layer_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 213 "parser.mly"
  ({ sgeoname = _2;
		ssize = _4;
		scolor = _6;
		srotation = _8 })
# 1357 "parser.ml"
               : 'shape_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 218 "parser.mly"
  ({ sgeoname = _2;
		ssize = _4;
		scolor = _6;
		srotation = 0 })
# 1369 "parser.ml"
               : 'shape_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 223 "parser.mly"
  ({ sgeoname = _2;
		ssize = _4;
		scolor = 0;
		srotation = _6 })
# 1381 "parser.ml"
               : 'shape_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 228 "parser.mly"
 ({ sgeoname = _2;
		ssize = _4;
		scolor = 0;
		srotation = 0 })
# 1392 "parser.ml"
               : 'shape_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 234 "parser.mly"
                       ( Binop(_1, Add, _3) )
# 1400 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 235 "parser.mly"
                       ( Binop(_1, Sub, _3) )
# 1408 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 236 "parser.mly"
                       ( Binop(_1, Mul, _3) )
# 1416 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 237 "parser.mly"
                       ( Binop(_1, Div, _3) )
# 1424 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 238 "parser.mly"
                       ( Lit(_1) )
# 1431 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 239 "parser.mly"
                     ( Var(_1) )
# 1438 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 240 "parser.mly"
                     ( Asn(_1, _3) )
# 1446 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 241 "parser.mly"
                       ( Seq(_1, _3) )
# 1454 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 242 "parser.mly"
                       ( Col(_1, _3) )
# 1462 "parser.ml"
               : 'expr))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
